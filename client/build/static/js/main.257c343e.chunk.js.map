{"version":3,"sources":["components/Launchitem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["LaunchItem","launch","flight_number","mission_name","launch_date_local","launch_success","className","format","to","MissionKey","LAUNCHES_QUERY","gql","Launches","useQuery","loading","error","data","console","log","launches","map","key","LAUNCH_QUERY","Launch","props","match","params","parseInt","variables","launch_year","rocket","rocket_id","rocket_name","rocket_type","classNames","client","ApolloClient","uri","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.257c343e.chunk.js","sourcesContent":["import React from 'react'\r\nimport className from 'classnames'\r\nimport Moment from 'react-moment'\r\nimport {Link} from 'react-router-dom'\r\nexport default function LaunchItem({launch:{flight_number, mission_name,launch_date_local,\r\n    launch_success}}){\r\n return <>\r\n   <div className=\"card card-body mb-3\">\r\n        <div className=\"row\">\r\n             <div className=\"col-md-9\">\r\n              <h4>Mission: <span className={className({\r\n                  'text-success':launch_success,\r\n                  'text-danger':!launch_success\r\n              })\r\n            }>{mission_name}</span></h4>\r\n              <p>Date: <Moment format='YYYY-MM-DD HH:mm'>{launch_date_local}</Moment> </p>\r\n             </div>\r\n             <div className=\"col-md-3\">\r\n                 <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\">Launch Details</Link>\r\n                 </div>\r\n        </div>\r\n </div>\r\n </>   \r\n    \r\n}\r\n","import React from 'react'\r\n\r\nexport default function MissionKey() {\r\n    return (\r\n        <div className=\"my-3\">\r\n            <p>\r\n                <span className=\"px-3 mr-2 bg-success\"/> = Success\r\n            </p>\r\n            <p>\r\n                <span className=\"px-3 mr-2 bg-danger\"/> = Fail\r\n            </p>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport { gql } from \"apollo-boost\";\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport LaunchItem from './Launchitem';\r\nimport MissionKey from './MissionKey'\r\n\r\n// function Launches() {\r\n//     const { loading, error, data } = useQuery(gql`\r\n//     query LaunchesQuery{\r\n//     launches{\r\n//         flight_number\r\n//         mission_name\r\n//         launch_date_local\r\n//         launch_success\r\n//     }}\r\n     \r\n//     `);\r\n  \r\n//     if (loading) return <p>Loading...</p>;\r\n//     if (error) return <p>Error :(</p>;\r\n//      console.log(data);\r\n//     return <h1>test</h1>\r\n//   }\r\n\r\n\r\n\r\nconst LAUNCHES_QUERY = gql`\r\nquery LaunchesQuery{\r\n    launches{\r\n        flight_number\r\n        mission_name\r\n        launch_date_local\r\n        launch_success\r\n    }\r\n}\r\n`;\r\n\r\nfunction Launches() {   \r\n    const { loading, error, data } = useQuery(LAUNCHES_QUERY);  \r\n    if (loading) return <p>Loading...</p>;\r\n    if (error) return <p>Error :(</p>;\r\n        console.log(data);\r\n        return<>\r\n         <MissionKey/>\r\n        {  \r\n            data.launches.map(launch =>(\r\n                <LaunchItem key={launch.flight_number} launch={launch}/>\r\n            ))\r\n        }\r\n        </>\r\n    }\r\nexport default Launches\r\n","import React,{useState,useEffect} from 'react'\r\nimport { gql } from \"apollo-boost\";\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport {Link} from 'react-router-dom'\r\nimport classNames from 'classnames';\r\n\r\nconst LAUNCH_QUERY = gql`\r\nquery LaunchQuery($flight_number:Int!){\r\n    launch(flight_number:$flight_number){\r\n        flight_number\r\n        mission_name\r\n        launch_year\r\n        launch_date_local\r\n        launch_success\r\n        rocket{\r\n            rocket_id\r\n            rocket_name\r\n            rocket_type\r\n        }\r\n    }\r\n}\r\n`;\r\nfunction Launch(props) { \r\n    \r\n    // console.log(props.match.params.flight_number);\r\n    let {flight_number} = props.match.params;\r\n  flight_number=parseInt(flight_number);\r\n  console.log(flight_number);\r\n    //  const [flight_number, setflight_number] = useState('')\r\n     const { loading, error, data } = useQuery(LAUNCH_QUERY,{        \r\n       variables: {flight_number},\r\n     });\r\n   \r\n \r\n    if (loading) return <p>Loading...</p>;\r\n    if (error) return <p>Error :(</p>;\r\n        console.log(data);\r\n        const{mission_name,launch_year,\r\n            launch_success,\r\n            rocket:{rocket_id,rocket_name, rocket_type}} = data.launch;\r\n        return<>\r\n         <h1>launch</h1>\r\n         <h1 className=\"display-4 my-3\"><span className=\"text-dark\">\r\n          Mission: {mission_name}</span></h1>\r\n          <h4 className= \"mb-3\">Launch Details</h4>\r\n          <ul className=\"list-group\">\r\n              <li className=\"list-group-item\">\r\n                  Flight Number:{flight_number}\r\n              </li>\r\n              <li className=\"list-group-item\">\r\n                  Launch year:{launch_year}\r\n              </li>\r\n              <li className=\"list-group-item\">\r\n                  launch Successful:<span className={classNames({\r\n                      'text-success':launch_success,\r\n                      'text-danger' : !launch_success\r\n                  })}>\r\n                  {launch_success? 'Yes':'No'}</span>\r\n              </li>\r\n              <li className=\"list-group-item\">\r\n                  Flight Number:{flight_number}\r\n              </li>\r\n          </ul>\r\n          <h4 className=\"my-3\">Rocket Details</h4>\r\n          <ul className=\"list-group\">\r\n          <li className=\"list-group-item\">\r\n                  Rocket Id:{rocket_id}\r\n              </li>\r\n              <li className=\"list-group-item\">\r\n                  Rocket Name:{rocket_name}\r\n              </li>\r\n              <li className=\"list-group-item\">\r\n                  Rocket type:{rocket_type}\r\n              </li>\r\n              </ul>\r\n              <hr/>\r\n              <Link to=\"/\" className=\"btn btn-secondary\">Back</Link>\r\n        </>\r\n    }\r\nexport default Launch\r\n","import React,{Component} from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport {BrowserRouter as Router, Route} from 'react-router-dom'\nimport Launches from './components/Launches'\nimport Launch from './components/Launch'\nimport './App.css';\n\nconst client = new ApolloClient({\n  uri: '/graphql',\n});\nconst App = () => (\n  <ApolloProvider client={client}>\n    <Router>\n    <div>\n      <h2>My first Apollo app ðŸš€</h2>\n      {/* <Launches/> */}\n      <Route exact path =\"/\" component={Launches}/>\n      <Route exact path =\"/launch/:flight_number\" component={Launch}/>\n    </div>\n    </Router>\n  </ApolloProvider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}